import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import java.io.*;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;


/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {


    public static void main(String[] args) throws FileNotFoundException {
        Gson gson = new Gson();
        ArrayList<String> tags= new ArrayList<>(0);

        try {
            String url = "https://ron-swanson-quotes.herokuapp.com/v2/quotes";
            HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
            connection.setRequestMethod("GET");
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();

                Type collectionType = new TypeToken<List<String>>() {}.getType();


                while ((line = reader.readLine()) != null) {
                    List<String> texts= gson.fromJson(line,collectionType);
                    ArrayList<Quotes> qs= new ArrayList<Quotes>();
                    System.out.println(texts.get(0));
                    Quotes q = new Quotes(tags,"","", texts.get(0));


                    String jsonContent = new String(Files.readAllBytes(Paths.get("D:\\java_Course\\java-fundamentals\\quotes\\src\\main\\resources\\recentquotes.json")));

                    // Check if the JSON content is not empty and contains a closing square bracket
                    if (!jsonContent.isEmpty() && jsonContent.endsWith("]")) {
                        // Step 2: Remove the closing square bracket from the end of the string
                        jsonContent = jsonContent.substring(0, jsonContent.lastIndexOf("]"));

                        // Step 3: Write the modified JSON content back to the file
                        BufferedWriter writer = new BufferedWriter(new FileWriter("D:\\java_Course\\java-fundamentals\\quotes\\src\\main\\resources\\recentquotes.json"));
                        writer.write(jsonContent);
                        Gson prettyGson = new GsonBuilder().setPrettyPrinting().create(); // for pretty-printing
                        String jsonString = prettyGson.toJson(q);
                        writer.write(",");
                        writer.write(jsonString);
                        writer.write("]");
                        writer.close();

                        System.out.println("Closing square bracket removed successfully.");
                    } else {
                        System.out.println("JSON file is empty or does not contain a closing square bracket.");
                    }
                   /*
                    try (FileWriter fileWriter = new FileWriter("D:\\java_Course\\java-fundamentals\\quotes\\src\\main\\resources\\recentquotes.json", true)) {
                        Gson prettyGson = new GsonBuilder().setPrettyPrinting().create(); // for pretty-printing
                        String jsonString = prettyGson.toJson(q);
                        fileWriter.write(",");
                        fileWriter.write(jsonString);
                        System.out.println("jsonString: "+jsonString);
                        System.out.println("Updated JSON data written to output.json");
                        fileWriter.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    */

                }
                reader.close();


                connection.disconnect();
            } else {
                System.out.println("404");

                try(Reader reader = new FileReader("D:\\java_Course\\java-fundamentals\\quotes\\src\\main\\resources\\recentquotes.json")) {
                    Type collectionType = new TypeToken<List<Quotes>>() {}.getType();

                    List<Quotes> quotesList= gson.fromJson(reader,collectionType);


                    System.out.println();
                    Random rand = new Random();
                    int randomIndex = rand.nextInt(quotesList.size());
                    Quotes randomElement = quotesList.get(randomIndex);
                    System.out.println("The author: "+ randomElement.getAuthor());
                    System.out.println("The text: "+ randomElement.getText());
                    System.out.println();
                    System.out.println();

                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException(e);
                }
                // Handle errors based on the response code.
            }

        }catch (IOException e){
            e.printStackTrace();

        }
    }
}
